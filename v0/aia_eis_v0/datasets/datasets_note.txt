datasets
    Source:
        Zhushan'paper
        Lai's
            Second version:
                At 2020.07, Lai provides a modification, 2020-07-22-阻抗类型整理2006.xlsx, of the his EIS ECM selection
                and parameter fitting, the new dataset will have '2020_07_revised' as suffix
            first version:
                2020-01-04-阻抗类型整理200103.xlsx
    goa_datasets
        Lai_manual_fitting_res
            These files are extracted from 2020-07-22-阻抗类型整理2006.xlsx
            Lai's second batch of manual fitting results is stored in 2020-07-22-阻抗类型整理2006.xlsx,
                specific modification is stored at Sheet-revision, main modifications are as following:
                    1-Reverse 7 slices of EIS data's ECM type (ECM-2 <-> ECM-9)
                    2-Remove 4 slices of EIS data belonging to ECM-9 (changed to other weird ECMs).
                2020_07_22_lai_ecm_Num_record.txt
                    records EIS raw experiment file and its corresponding ECM types, like: 4-4,9; 3-15,2.
                2020_07_22_lai_ecm2_fitting_res.csv
                    This file is extracted from 2020-07-22-阻抗类型整理2006.xlsx / sheet statistic
                    Lai's manual fitting results of all EIS belonging to ECM-2 R0(Q0R1)(Q1R2)
                    sequence,   experiment order,   R0,         Q0_y,       Q0_n,   R1,     Q1_y,       Q1_n,   R2,     Chi-Square
                    1,          1-14,               0.01839,    0.006388,   0.8688, 1.175,  0.002783,   0.798,  1371,   0.001314
                2020_07_22_lai_ecm9_fitting_res.csv
                    This file is extracted from 2020-07-22-阻抗类型整理2006.xlsx / sheet statistic
                    Lai's manual fitting results of all EIS belonging to ECM-9 R0(Q0(R1(Q1R2)))
                    sequence,   experiment order,   R0,         Q0_y,       Q0_n,   R1,     Q1_y,       Q1_n,   R2,     Chi-Square
                    1,          1-1,                0.003457,   0.0005343,  0.898,  103.2,  0.001162,   0.737,  3593,   0.003557

            Lai's First batch of manual fitting results is stored in 2020-01-04-阻抗类型整理200103.xlsx,
            and was extracted to files:
                2020_01_04_lai_ecm_Num_record.txt
                    records EIS raw experiment file and its corresponding ECM types, like: 4-4,9; 3-15,2.
                2020_01_04_lai_ecm2_fitting_res.csv
                    Lai's manual fitting results of all EIS belonging to ECM-2
                2020_01_04_lai_ecm9_fitting_res.csv
                    Lai's manual fitting results of all EIS belonging to ECM-2

        Normed
            code: dpfc_src\data_processor\GOA_preprocessor\goa_data_wrapper.py
            The raw impedance [multiply] experiment area ==> normed impedance (/ cm^2)
            是原始阻抗 乘以 实验面积，千万别搞错
            2020_08_22_goa_lai_normed_dataset_pickle_1.file
                data structure
                dict{
                        'fn': str, like: '1-1', '2-23'
                        ‘ecm_num’: int, like 2,4,6
                        'f': fre_list[float],
                        'z_raw':normed_z_list[complex]
                    }
                file 1-1
                    divide exp_area
                        (5456973267.326733      -10981544554.455448j)
                    multiply exp_area
                        (0.005566658429999999   -0.0112022736j)
                    两者相差将近 1e12
                file 1-2
                    divide exp_area
                        (7916078217.821783      -8220597029.702971j)
                    multiply exp_area
                        (0.008075191389999998   -0.008385831029999999j)
                    两者相差将近 1e12
            2020_08_19_goa_lai_normed_dataset_pickle_1.file
                这个数据是错误的，不能用，计算 阻抗 = 原始阻抗 除以（应该是乘以） 实验面积
                data structure
                dict{
                        'fn': str, like: '1-1', '2-23'
                        ‘ecm_num’: int, like 2,4,6
                        'f': fre_list[float],
                        'z_raw':normed_z_list[complex]
                    }

            2020_07_07_goa_lai_normed_dataset_pickle_0.file
                data structure
                dict{
                        '1-1'  : {'fre': fre_list[float], 'z':normed_z_list[complex]}
                        '1-13' : {'fre': fre_list[float], 'z':normed_z_list[complex]}
                        '3-15' : {'fre': fre_list[float], 'z':normed_z_list[complex]}
                    }
        Simulated
            these file are generated by 'DPFC_test_7_ECM_Choices.ipynb'
                basic config:
                    Frequency range 1e5 ~ 1e-3, 10 points per decade
            Store the parameters's configuration of each type of ECM
            The original content is stored at 'whole_dataset.xlsx--Sheet_ECMs_paras'
            The simulation results are copied from 'dpfc_src\plugins_test\jupter_code\ecm_sim_res'
            Date_sim_ecm_*_pickle.file
                pickle file
                data structure
                    dict{
                            'ecm_num': ECM serial, int
                            'limit' : limit_list = [[para0_min, para0_max], [para1_min, para1_max], ...]
                            'para': para_list = [float, para0, para1, ...]
                            'f': fre_list = [float]
                            'z_sim': z_list = [complex]
                        }
            ecm_1
            ecm_2
                2020_3_26_sim_ecm_2_pickle.file
                2020_05_20_sim_ecm_2_pickle_0.file
        Raw
            code: dpfc_src\data_processor\GOA_preprocessor\goa_data_wrapper.py
            2020_08_19_goa_lai_dataset_pickle.file
                pickle file
                data structure
                    list[
                            dict{
                                    'file_name': str, like '1-1' (Lai's 1-1.DTA file)
                                    -->'ecm_num': int, like 3 (0 ~ 9)
                                    'f': fre_list == list[float, 0.001, 0.01, ...]
                                    -->'z_raw': z_list == list[complex, complex, complex, ]
                                },
                        ]
            2020_03_26_goa_lai_dataset_pickle.file
                pickle file
                data structure
                    list[
                            dict{
                                    'file_name': str, like '1-1' (Lai's 1-1.DTA file)
                                    -->'ecm_num': int, like 3 (0 ~ 9)
                                    'f': fre_list == list[float, 0.001, 0.01, ...]
                                    -->'z_raw': z_list == list[complex, complex, complex, ]
                                },
                        ]
            2020_03_24_goa_lai_dataset_pickle.file
                pickle file
                data structure
                    list[
                            dict{
                                    'file_name': str, like '1-1' (Lai's 1-1.DTA file)
                                    -->'ecm-num': int, like 3 (0 ~ 9)
                                    'f': fre_list == list[float, 0.001, 0.01, ...]
                                    -->'z': z_list == list[complex, complex, complex, ]
                                },
                        ]
    ml_datasets
        code: dpfc_src\data_processor\data_splitor\ml_data_splitor.py
        raw
            ml_raw_****_data_dict_pickle_2020_03_07.file (**** = train 70% /vali 15%/test 15%)
                pickle file
                data structure
                    dict{
                            label (int): [
                                            [(x0, y0), (x1, y1), ..., (xn-2, yn-2), (xn-1, yn-1)]
                                            ...
                                            ]
                        }
        normed
            ml_normed_****_data_list_pickle_2020_03_07.file (**** = train 70% /vali 15%/test 15%)
                pickle file
                data structure
                    list[
                            [label (int), [(x0, y0), (x1, y1), ..., (xn-2, yn-2), (xn-1, yn-1)]]
                        ]
                    the range of x or y is 0 ~ 1
                Usage
                    To train MLs
